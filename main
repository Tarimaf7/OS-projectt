
import java.util.Scanner;
import java.io.PrintWriter;
import java.io.FileWriter;
import java.io.IOException;
public class Scheduler {
	 static PCB[] cpu;// the scheduling Q
	 static PCB[] Q1;
    static  PCB[] Q2;
   static int[] burstTime;
	public static void main(String[] args) {
        Scanner read = new Scanner(System.in);
        int choice;
       
         // the scheduling Q
        int pri;
        int n1 = 0; // the actual length of Q1
        int n2 = 0; // the actual length of Q2
        int numP;

        do {
        	System.out.println("1. Enter process' information ");
            System.out.println("2. Report detailed information about each process and different scheduling criteria ");
            System.out.println("3. EXit the program");	
            System.out.print("Enter your choice!: ");
            
            choice = read.nextInt();

            switch (choice) {
                case 1:
                    // scheduling the processes
                    System.out.println("Enter the number of processes: ");
                    numP = read.nextInt();
                    Q1 = new PCB[numP];
                    Q2 = new PCB[numP];

                    for (int i = 0; i < numP; i++) {
                        System.out.println("Enter process information: ");
                        System.out.println("Process ID: ");
                        int ID = read.nextInt();
                        System.out.println("Priority: ");
                        pri = read.nextInt();
                        System.out.println("Arrival time: ");
                        int arrTime = read.nextInt();
                        System.out.println("CPU burst time: ");
                        int CPUburst = read.nextInt();

                        PCB obj = new PCB(ID, pri, arrTime, CPUburst);

                        if (pri == 1) {
                            Q1[n1] = obj;
                            n1++;
                        }if (pri == 2){
                        	
                            Q2[n2] = obj;
                            n2++;
                        }
                    }

                    burstTime = new int[numP];
                    for (int n = 0; n < n1; n++) {
                        
                            burstTime[n] = Q1[n].getCPUBurstTime();
                        
                    }

                    PCBLinkedList<PCB> helpingQ = new PCBLinkedList<>();
                    cpu = new PCB[numP];
                    
                    SortArrival(Q1);

                    for (int m = 0; m < Q1.length; m++) {
                    	if(Q1[m]!=null) {
                        helpingQ.add(Q1[m]);
                    }
                    	else {
                    		break;
                    	}
                    }
                    int cs=0;
                
                    helpingQ.findfirst();
                    while(helpingQ.isEmpty()==false) {
                       // helpingQ.findfirst();
                    	if (helpingQ.retrieve()!=null) {
                        if (helpingQ.retrieve().getCPUBurstTime() <= 0) {
                        	
                            	helpingQ.delete();
                        } else {
                            cpu[cs] = helpingQ.retrieve();
                            cs++;
                            helpingQ.retrieve().setCPUBurstTime(helpingQ.retrieve().getCPUBurstTime() - 3);
                            if(helpingQ.last()) {
                            	helpingQ.findfirst();
                            }
                            else {
                            	helpingQ.findnext();
                            }
                            
                        }
                    }
                    }
                   

                    SortBurst(Q2);
                   int count=0;
                    for (int i = 0; i < cpu.length; i++) {
                        if(cpu[i]==null&& count < Q2.length) {
                            cpu[i] = Q2[count];
                           count++; 
                        
                    }}
                   
                    break;

                case 2:
                	
                	System.out.println("the processes order scheduled in the cpu: ");
                	for(int n=0;n<cpu.length;n++) {
                		if (cpu[n]!=null) {
                			System.out.print("["+cpu[n].getProcessID());
                			System.out.print("] |");
                		}
                	}
                	for(int s=0;s<cpu.length;s++) {
                		if (Q2[s]!=null) {
                			System.out.print("["+Q2[s].getProcessID());
                			System.out.print("] |");
                		}
                	}
                	
                	
                	for (int i =0;i<cpu.length;i++) {
                		if(cpu[i]!=null) {
                		System.out.println("process ID: "+cpu[i].getProcessID());
                		System.out.println("process priority: "+cpu[i].getPriority());
                		System.out.println("process arrival time: "+cpu[i].getArrivalTime());
                		System.out.println("process cpu burst time: "+burstTime[i]);
                	}
                		
                		
                	}
                	for(int j=0;j<Q2.length;j++) {
        				if(Q2[j]!=null) {
        				System.out.print(Q2[j].getProcessID());
        				System.out.println("process priority: "+Q2[j].getPriority());
                		System.out.println("process arrival time: "+Q2[j].getArrivalTime());
                		System.out.println("process cpu burst time: "+Q2[j].getCPUBurstTime());
        			}
        				}
                	
                	 try {
                         FileWriter fileWriter = new FileWriter(";\"C:\\Users\\tarim\\OneDrive\\Desktop\\report.txt\"");
                         PrintWriter printWriter = new PrintWriter(fileWriter);
                         printWriter.println("");
                         
                         printWriter.println();
                         printWriter.println("Processes detailed information");
                         printWriter.println("---------------------------------");
                         
                         for (int i = 0; i < cpu.length; i++) {
                        	    PCB p = cpu[i];
                        	    printWriter.println("Process ID: " + p.getProcessID());
                        	    printWriter.println("Priority: " + p.getPriority());
                        	    printWriter.println("Arrival Time: " + p.getArrivalTime());
                        	   // printWriter.println("Start Time: " + p.getStartTime());
                        	    printWriter.println("CPU Burst Time: " +burstTime[i]);
                        	   // printWriter.println("Termination Time: " + p.getTerminationTime());
                        	   // printWriter.println("Turnaround Time: " + p.getTurnAroundTime());
                        	   // printWriter.println("Waiting Time: " + p.getWaitingTime());
                        	    //printWriter.println("Response Time: " + p.getResponseTime());
                        	    printWriter.println("---------------------------------");
                        	}
                         for(int t=0;t<Q2.length;t++) {
                        	 PCB p = Q2[t];
                     	    printWriter.println("Process ID: " + p.getProcessID());
                     	    printWriter.println("Priority: " + p.getPriority());
                     	    printWriter.println("Arrival Time: " + p.getArrivalTime());
                     	   // printWriter.println("Start Time: " + p.getStartTime());
                     	    printWriter.println("CPU Burst Time: " + p.getCPUBurstTime());
                     	   // printWriter.println("Termination Time: " + p.getTerminationTime());
                     	   // printWriter.println("Turnaround Time: " + p.getTurnAroundTime());
                     	   // printWriter.println("Waiting Time: " + p.getWaitingTime());
                     	    //printWriter.println("Response Time: " + p.getResponseTime());
                     	    printWriter.println("---------------------------------");
                         }
                		 printWriter.close();

                         
                         }catch (IOException e) 
                         {
                         System.out.println("SOMETHING WENT WRONGE!");
                         }
                    // Some code for case 2
                    break;

                case 3:
                    System.out.println("Thank you, bye!");
                    break;
            }

        } while (choice != 3);

        read.close();
    }

    public static void SortBurst(PCB[] array) {
        int n = array.length;
        for (int i = 0; i < n - 1; i++) {
            for (int j = 0; j < n - i - 1; j++) {
                
                    // Swap array[j] and array[j+1]
                   
            	 if (array[j] != null && array[j + 1] != null && array[j].getCPUBurstTime()> array[j + 1].getCPUBurstTime()) {
                        // Swap array[j] and array[j+1]
                        PCB temp = array[j];
                        array[j] = array[j + 1];
                        array[j + 1] = temp;
                    }
                }
            }
        }
    
    public static void SortArrival(PCB[] array) {
        int n = array.length;
        for (int i = 0; i < n - 1; i++) {
            for (int j = 0; j < n - i - 1; j++) {
                
                    // Swap array[j] and array[j+1]
                   
            	 if (array[j] != null && array[j + 1] != null && array[j].getArrivalTime()> array[j + 1].getArrivalTime()) {
                        // Swap array[j] and array[j+1]
                        PCB temp = array[j];
                        array[j] = array[j + 1];
                        array[j + 1] = temp;
                    }
                }
            }
        }
    
   
}


